{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "lanlytics API Configuration",
  "Parameters": {
    "VpcId": {
      "Description": "Id of existing VPC, all components will be created here",
      "Type": "AWS::EC2::VPC::Id",
      "Default": ""
    },
    "SubnetGroupId": {
      "Description": "Id of VPC subnet group; must exist in the specified VPC",
      "Type": "AWS::EC2::Subnet::Id",
      "Default": ""
    },g
    "BaseImageId": {g
      "Description": "Base AMI Id for instances",g
      "Type": "AWS::EC2::Image::Id",g
      "Default": ""g
    },
    "KeyName": {
      "Description": "Key pair name for launched instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },g
    "SSHIP": {g
      "Description": "IP to restrict SSH access",g
      "Type": "String",g
      "Default": "0.0.0.0/0"g
    },
    "DynamoDBJobsTableName": {
      "Description": "DynamoDB table name for job storage",
      "Type": "String",
      "Default": "jobs"
    },
    "S3WorkerBucketName": {
      "Description": "S3 bucket for API workers",
      "Type": "String",
      "Default": "lanlytics-api-worker"
    },g
    "S3DockerImageBucketName": {g
      "Description": "S3 bucket for Docker Registry",g
      "Type": "String",g
      "Default": "lanlytics-registry-images"g
    }
  },
  "Resources": {
    "APIDynamoDBTableAccess": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "APIDynamoDBTableAccess",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "JobsTable",
                  "Arn"
                ]
              }
            }
          ]
        },g
        "Roles": [g
          {"Ref": "WorkerRole"},g
          {"Ref": "APIServerRole"}g
        ]
      },g
      "DependsOn": "JobsTable"
    },
    "APIS3BucketReadWriteAccess": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "APIS3BucketReadWriteAccess",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:ListBucket",
              "Resource": {
                "Fn::GetAtt": [
                  "WorkerBucket",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "WorkerBucket",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },g
        "Roles": [{"Ref":"WorkerRole"}]
      },g
      "DependsOn": "WorkerBucket"
    },g
    "RegistryS3BucketReadWriteAccess": {g
      "Type": "AWS::IAM::Policy",g
      "Properties": {g
        "PolicyName": "APIS3BucketReadWriteAccess",g
        "PolicyDocument": {g
          "Version": "2012-10-17",g
          "Statement": [g
            {g
              "Effect": "Allow",g
              "Action": "s3:ListBucket",g
              "Resource": {g
                "Fn::GetAtt": [g
                  "RegistryBucket",g
                  "Arn"g
                ]g
              }g
            },g
            {g
              "Effect": "Allow",g
              "Action": [g
                "s3:PutObject",g
                "s3:GetObject"g
              ],g
              "Resource": {g
                "Fn::Join": [g
                  "",g
                  [g
                    {g
                      "Fn::GetAtt": [g
                        "RegistryBucket",g
                        "Arn"g
                      ]g
                    },g
                    "/*"g
                  ]g
                ]g
              }g
            }g
          ]g
        },g
        "Roles": [{"Ref":"RegistryRole"}]g
      },g
      "DependsOn": "RegistryBucket"g
    },
    "WorkerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "APIWorker",
        "AssumeRolePolicyDocument": {g
          "Version": "2012-10-17",g
          "Statement": [{g
              "Effect": "Allow",g
              "Principal": {g
                "Service": ["ec2.amazonaws.com"]g
              },g
              "Action": ["sts:AssumeRole"]g
          }]g
        },g
        "Path": "/"g
      }
    },g
    "WorkerInstanceProfile": {g
      "Type": "AWS::IAM::InstanceProfile",g
      "Properties": {g
        "Path": "/",g
        "Roles": [{"Ref": "WorkerRole"}]g
      }g
    },
    "APIServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "APIServer",
        "AssumeRolePolicyDocument": {g
          "Version": "2012-10-17",g
          "Statement": [{g
              "Effect": "Allow",g
              "Principal": {g
                "Service": ["ec2.amazonaws.com"]g
              },g
              "Action": ["sts:AssumeRole"]g
          }]g
        },g
        "Path": "/"g
      }
    },g
    "APIServerInstanceProfile": {g
      "Type": "AWS::IAM::InstanceProfile",g
      "Properties": {g
        "Path": "/",g
        "Roles": [{"Ref": "APIServerRole"}]g
      }g
    },g
    "RegistryRole": {g
      "Type": "AWS::IAM::Role",g
      "Properties": {g
        "RoleName": "DockerRegistry",g
        "AssumeRolePolicyDocument": {g
          "Version": "2012-10-17",g
          "Statement": [{g
              "Effect": "Allow",g
              "Principal": {g
                "Service": ["ec2.amazonaws.com"]g
              },g
              "Action": ["sts:AssumeRole"]g
          }]g
        },g
        "Path": "/"g
      }g
    },g
    "RegistryInstanceProfile": {g
      "Type": "AWS::IAM::InstanceProfile",g
      "Properties": {g
        "Path": "/",g
        "Roles": [{"Ref": "RegistryRole"}]g
      }g
    },
    "RedisUserSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "RedisUser",
        "GroupDescription": "Security group for access to Redis server",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "RedisServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "RedisServer",
        "GroupDescription": "Security group granting Redis port access to machines with RedisUser security group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "6379",
            "ToPort": "6379",
            "SourceSecurityGroupId": {
              "Ref": "RedisUserSecurityGroup"
            }
          }
        ]
      }
    },
    "RegistryUserSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "RegistryUser",
        "GroupDescription": "Security group for access to Docker Registry server",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "RegistryServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "RegistryServer",
        "GroupDescription": "Security group granting web access to machines with RegistryUser security group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "RegistryUserSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "SourceSecurityGroupId": {
              "Ref": "RegistryUserSecurityGroup"
            }
          }
        ]
      }
    },
    "WebAccess": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "WebAccess",
        "GroupDescription": "Security group granting web access from anywhere",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SSHAccess": {g
      "Type": "AWS::EC2::SecurityGroup",g
      "Properties": {
        "GroupName": "SSHAccess",
        "GroupDescription": "Security group granting SSH access from anywhere",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "SSHIP"}
          }
        ]g
      }
    },
    "APIServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",g
        "ImageId": {"Ref": "BaseImageId"},
        "IamInstanceProfile": {
          "Ref": "APIServerInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "WebAccess"
          },g
          {g
            "Ref": "RedisUser"g
          },
          {
            "Ref": "SSHAccess"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": "8"
            }
          }
        ],g
        "SubnetId": {"Ref": "SubnetGroupId"},
        "Tags": [
          {
            "Key": "Name",
            "Value": "API Server"
          }
        ]
      },g
      "DependsOn": "APIDynamoDBTableAccess"
    },
    "APIWorkerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",g
        "ImageId": {"Ref": "BaseImageId"},
        "IamInstanceProfile": {
          "Ref": "WorkerInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "RedisUserSecurityGroup"
          },
          {
            "Ref": "RegistryUserSecurityGroup"
          },
          {
            "Ref": "SSHAccess"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": "8"
            }
          }
        ],g
        "SubnetId": {"Ref": "SubnetGroupId"},
        "Tags": [
          {
            "Key": "Name",
            "Value": "API Worker"
          }
        ]
      },g
      "DependsOn": ["APIS3BucketReadWriteAccess", "APIDynamoDBTableAccess"]
    },
    "DockerRegistryInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",g
        "ImageId": {"Ref": "BaseImageId"},g
        "IamInstanceProfile": {"Ref": "RegistryInstanceProfile"},
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "RegistryServerSecurityGroup"
          },
          {
            "Ref": "SSHAccess"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": "8"
            }
          }
        ],g
        "SubnetId": {"Ref": "SubnetGroupId"},
        "Tags": [
          {
            "Key": "Name",
            "Value": "Docker Registry"
          }
        ]
      },g
      "DependsOn": "RegistryS3BucketReadWriteAccess"
    },g
    "RedisSubnetGroup": {g
      "Type": "AWS::ElastiCache::SubnetGroup",g
      "Properties": {g
        "CacheSubnetGroupName": "APIQueueSubnet",g
        "Description": "Subnet for API Redis queue and components",g
        "SubnetIds": [{"Ref": "SubnetGroupId"}]g
      }g
    },
    "RedisQueue": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "AutoMinorVersionUpgrade": true,
        "CacheNodeType": "cache.t2.micro",
        "VpcSecurityGroupIds": [
          {
            "Ref": "RedisServerSecurityGroup"
          }
        ],
        "Engine": "redis",g
        "NumCacheNodes": 1,g
        "CacheSubnetGroupName": {"Ref": "RedisSubnetGroup"}
      }
    },
    "JobsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Ref": "DynamoDBJobsTableName"
        },g
        "AttributeDefinitions": [g
          {g
            "AttributeName": "job_id",g
            "AttributeType": "S"g
          }g
        ],
        "KeySchema": [
          {
            "AttributeName": "job_id",
            "KeyType": "HASH"
          }
        ],g
        "ProvisionedThroughput": {g
          "ReadCapacityUnits": "5",g
          "WriteCapacityUnits": "5"g
        }
      }
    },
    "WorkerBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "S3WorkerBucketName"
        }
      }
    },g
    "RegistryBucket": {g
      "Type": "AWS::S3::Bucket",g
      "Properties": {g
        "BucketName": {g
          "Ref": "S3DockerImageBucketName"g
        }g
      }g
    }
  },
  "Outputs": {
    "ApiServerIp": {
      "Description": "Public IP address of API web server",
      "Value": {
        "Fn::GetAtt": [
          "APIServerInstance",
          "PublicIp"
        ]
      }
    },
    "RegistryIp": {
      "Description": "Public IP address of the private Docket Registry",
      "Value": {
        "Fn::GetAtt": [
          "DockerRegistryInstance",
          "PublicIp"
        ]
      }
    },
    "WorkerIp": {
      "Description": "Public IP address of API worker instance",
      "Value": {
        "Fn::GetAtt": [
          "APIWorkerInstance",
          "PublicIp"
        ]
      }
    },
    "RedisEndpoint": {
      "Description": "Endpoint for the Redis cluster",
      "Value": {
        "Fn::GetAtt": [
          "RedisQueue",
          "RedisEndpoint.Address"
        ]
      }
    }
  }
}g
