AWSTemplateFormatVersion: 2010-09-09
Description: lanlytics API Configuration
Parameters:
  VpcId:
    Description: 'Id of existing VPC, all components will be created here'
    Type: 'AWS::EC2::VPC::Id'
    Default: ''
  SubnetGroupId:
    Description: Id of VPC subnet group; must exist in the specified VPC
    Type: 'AWS::EC2::Subnet::Id'
    Default: ''
  BaseImageId:
    Description: Base AMI Id for instances
    Type: 'AWS::EC2::Image::Id'
    Default: ''
  KeyName:
    Description: Key pair name for launched instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: ''
  SSHIP:
    Description: IP to restrict SSH access
    Type: String
    Default: 0.0.0.0/0
  DynamoDBJobsTableName:
    Description: DynamoDB table name for job storage
    Type: String
    Default: jobs
  S3WorkerBucketName:
    Description: S3 bucket for API workers
    Type: String
    Default: lanlytics-api-worker
  S3DockerImageBucketName:
    Description: S3 bucket for Docker Registry
    Type: String
    Default: lanlytics-registry-images
Resources:
  APIDynamoDBTableAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: APIDynamoDBTableAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:*'
            Resource: "*"
      Roles:
        - !Ref WorkerRole
        - !Ref APIServerRole
    DependsOn: JobsTable
  APIS3BucketReadWriteAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: APIS3BucketReadWriteAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:ListBucket'
            Resource: !GetAtt 
              - WorkerBucket
              - Arn
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - WorkerBucket
                  - Arn
                - /*
      Roles:
        - !Ref WorkerRole
    DependsOn: WorkerBucket
  RegistryS3BucketReadWriteAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: APIS3BucketReadWriteAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:ListBucket'
            Resource: !GetAtt 
              - RegistryBucket
              - Arn
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - RegistryBucket
                  - Arn
                - /*
      Roles:
        - !Ref RegistryRole
    DependsOn: RegistryBucket
  WorkerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: APIWorker
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  WorkerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WorkerRole
  APIServerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: APIServer
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  APIServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref APIServerRole
  RegistryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: DockerRegistry
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  RegistryInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RegistryRole
  RedisUserSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: RedisUser
      GroupDescription: Security group for access to Redis server
      VpcId: !Ref VpcId
  RedisServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: RedisServer
      GroupDescription: >-
        Security group granting Redis port access to machines with RedisUser
        security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref RedisUserSecurityGroup
  RegistryUserSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: RegistryUser
      GroupDescription: Security group for access to Docker Registry server
      VpcId: !Ref VpcId
  RegistryServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: RegistryServer
      GroupDescription: >-
        Security group granting web access to machines with RegistryUser
        security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref RegistryUserSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref RegistryUserSecurityGroup
  WebAccess:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: WebAccess
      GroupDescription: Security group granting web access from anywhere
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  SSHAccess:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SSHAccess
      GroupDescription: Security group granting SSH access from anywhere
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHIP
  APIServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref BaseImageId
      IamInstanceProfile: !Ref APIServerInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebAccess
        - !Ref SSHAccess
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: '8'
      SubnetId: !Ref SubnetGroupId
      Tags:
        - Key: Name
          Value: API Server
    DependsOn: APIDynamoDBTableAccess
  APIWorkerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref BaseImageId
      IamInstanceProfile: !Ref WorkerInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref RedisUserSecurityGroup
        - !Ref RegistryUserSecurityGroup
        - !Ref SSHAccess
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: '8'
      SubnetId: !Ref SubnetGroupId
      Tags:
        - Key: Name
          Value: API Worker
    DependsOn:
      - APIS3BucketReadWriteAccess
      - APIDynamoDBTableAccess
  DockerRegistryInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref BaseImageId
      IamInstanceProfile: !Ref RegistryInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref RegistryServerSecurityGroup
        - !Ref SSHAccess
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: '8'
      SubnetId: !Ref SubnetGroupId
      Tags:
        - Key: Name
          Value: Docker Registry
    DependsOn: RegistryS3BucketReadWriteAccess
  RedisSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      CacheSubnetGroupName: APIQueueSubnet
      Description: Subnet for API Redis queue and components
      SubnetIds:
        - !Ref SubnetGroupId
  RedisQueue:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      AutoMinorVersionUpgrade: true
      CacheNodeType: cache.t2.micro
      VpcSecurityGroupIds:
        - !Ref RedisServerSecurityGroup
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
  JobsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DynamoDBJobsTableName
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  WorkerBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3WorkerBucketName
  RegistryBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3DockerImageBucketName
Outputs:
  ApiServerId:
    Description: Public IP address of API web server
    Value: !Ref APIServerInstance
  RegistryId:
    Description: Public IP address of the private Docket Registry
    Value: !Ref DockerRegistryInstance
  WorkerId:
    Description: Public IP address of API worker instance
    Value: !Ref APIWorkerInstance
  RedisEndpoint:
    Description: Endpoint for the Redis cluster
    Value: !GetAtt 
      - RedisQueue
      - RedisEndpoint.Address
